## ROMM
apiVersion: apps/v1
kind: Deployment
metadata:
  name: romm-deployment
  labels:
    app.kubernetes.io/name: romm
    app.kubernetes.io/instance: romm
    app.kubernetes.io/component: web
spec:
  replicas: 1
  # The Recreate strategy ensures the old pod is terminated before the new one is created.
  # This is crucial for ReadWriteOnce volumes (like Longhorn) to prevent mounting conflicts during updates.
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: romm
      app.kubernetes.io/component: web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: romm
        app.kubernetes.io/component: web
    spec:
      # This initContainer runs before the main app container.
      # It copies the default config.yml into the persistent volume if it doesn't exist.
      # This prevents overwriting user changes on subsequent pod restarts.
      initContainers:
        - name: init-config
          image: busybox:1.37
          command:
            - "sh"
            - "-c"
            - "if [ ! -f /config/config.yml ]; then cp /config-initial/config.yml /config/config.yml; echo 'Default config.yml copied.'; else echo 'config.yml already exists.'; fi"
          volumeMounts:
            - name: romm-config-initial
              mountPath: /config-initial
              readOnly: true
            - name: romm-config
              mountPath: /config
      containers:
        # --- MariaDB Sidecar Container ---
        - name: mariadb
          image: mariadb:12.0.2 # Pinned version for predictable deployments
          # No port exposure needed, communication is over localhost within the pod.
          envFrom:
            - secretRef:
                name: romm-secrets
          env:
            - name: MARIADB_DATABASE
              value: "romm"
            - name: MARIADB_USER
              value: "romm-user"
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
          # Probes are omitted on the sidecar; the main app's liveness probe will trigger
          # a pod restart if the DB connection fails, which is the desired outcome.

        # --- ROMM Application Container ---
        - name: romm
          image: rommapp/romm:4.2.0 # Pinned version for predictable deployments
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                name: romm-config
            - secretRef:
                name: romm-secrets
          env:
            - name: DB_PASSWD
              valueFrom:
                secretKeyRef:
                  name: romm-secrets
                  key: MARIADB_PASSWORD
          # Readiness probes signal when the app is ready to accept traffic.
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          # Liveness probes restart the pod if the app becomes unresponsive.
          # This is key for recovering if the DB sidecar wasn't ready on first start.
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 45
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: romm-resources
              mountPath: /romm/resources
            - name: romm-redis-data
              mountPath: /redis-data
            - name: romm-library
              mountPath: /romm/library/roms
            - name: romm-assets
              mountPath: /romm/assets
            - name: romm-config
              mountPath: /romm/config
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-data-pvc
        - name: romm-resources
          persistentVolumeClaim:
            claimName: romm-resources-pvc
        - name: romm-redis-data
          persistentVolumeClaim:
            claimName: romm-redis-data-pvc
        - name: romm-library
          persistentVolumeClaim:
            claimName: media-roms-pvc
        - name: romm-assets
          persistentVolumeClaim:
            claimName: romm-assets-pvc
        # This volume provides the initial config.yml from the ConfigMap.
        - name: romm-config-initial
          configMap:
            name: romm-initial-config
        - name: romm-config
          persistentVolumeClaim:
            claimName: romm-config-pvc